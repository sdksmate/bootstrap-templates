<!doctype html>
<html>
<head>
  <meta charset="utf-8">

  <title>imagesLoaded</title>

  <meta name="viewport" content="width=device-width, initial-scale=1">

  <link rel="stylesheet" href="styles.css">

</head>
<body>

  <div id="content">
    <h1 id="imagesloaded">imagesLoaded</h1>
<p class="tagline">JavaScript is all like &quot;You images done yet or what?&quot;</p>

<p><a href="http://imagesloaded.desandro.com">imagesloaded.desandro.com</a></p>
<p>Detect when images have been loaded.</p>
<p>
  <a class="gh-button" href="https://github.com/desandro/imagesloaded">
    <span class="gh-button__title">
      <svg class="gh-button__icon gh-button__icon--github-logo" viewbox="0 0 1024 1024">
        <path d="M512 0C229.252 0 0 229.25199999999995 0 512c0 226.251 146.688 418.126 350.155 485.813 25.593 4.686 34.937-11.125 34.937-24.626 0-12.188-0.469-52.562-0.718-95.314-128.708 23.46-161.707-31.541-172.469-60.373-5.525-14.809-30.407-60.249-52.398-72.263-17.988-9.828-43.26-33.237-0.917-33.735 40.434-0.476 69.348 37.308 78.471 52.75 45.938 77.749 119.876 55.627 148.999 42.5 4.654-32.999 17.902-55.627 32.501-68.373-113.657-12.939-233.22-56.875-233.22-253.063 0-55.94 19.968-101.561 52.658-137.404-5.22-12.999-22.844-65.095 5.063-135.563 0 0 42.937-13.749 140.811 52.501 40.811-11.406 84.594-17.031 128.124-17.22 43.499 0.188 87.314 5.874 128.188 17.28 97.689-66.311 140.686-52.501 140.686-52.501 28 70.532 10.375 122.564 5.124 135.499 32.811 35.844 52.626 81.468 52.626 137.404 0 196.686-119.751 240-233.813 252.686 18.439 15.876 34.748 47.001 34.748 94.748 0 68.437-0.686 123.627-0.686 140.501 0 13.625 9.312 29.561 35.25 24.562C877.436 929.998 1024 738.126 1024 512 1024 229.25199999999995 794.748 0 512 0z"/>
      </svg>
      <span class="gh-button__title__text">imagesLoaded on GitHub</span>
    </span>
    <span class="gh-button__stat">
      <svg class="gh-button__icon gh-button__icon--star" viewbox="0 0 896 1024">
        <path d="M896 384l-313.5-40.781L448 64 313.469 343.219 0 384l230.469 208.875L171 895.938l277-148.812 277.062 148.812L665.5 592.875 896 384z"/>
      </svg>
      <span class="gh-button__stat__text">8,000</span>
    </span>
  </a>
</p>

<div class="page-nav">
<li class="page-nav__item page-nav__item--h2"><a href="#demo">Demo</a></li>
<li class="page-nav__item page-nav__item--h2"><a href="#install">Install</a></li>
<li class="page-nav__item page-nav__item--h2"><a href="#jquery">jQuery</a></li>
<li class="page-nav__item page-nav__item--h2"><a href="#vanilla-javascript">Vanilla JavaScript</a></li>
<li class="page-nav__item page-nav__item--h2"><a href="#background">Background</a></li>
<li class="page-nav__item page-nav__item--h2"><a href="#events">Events</a></li>
<li class="page-nav__item page-nav__item--h2"><a href="#sponsored-by-metafizzy">Sponsored by Metafizzy</a></li>
<li class="page-nav__item page-nav__item--h2"><a href="#properties">Properties</a></li>
<li class="page-nav__item page-nav__item--h2"><a href="#browserify">Browserify</a></li>
<li class="page-nav__item page-nav__item--h2"><a href="#webpack">Webpack</a></li>
<li class="page-nav__item page-nav__item--h2"><a href="#requirejs">RequireJS</a></li>
<li class="page-nav__item page-nav__item--h2"><a href="#browser-support">Browser support</a></li>
<li class="page-nav__item page-nav__item--h2"><a href="#mit-license">MIT License</a></li>
</div>
<h2 id="demo">Demo</h2>

<div id="progress-demo">
  <div id="status">
    <progress max="7" value="0"></progress>
  </div>
  <p>
    <button id="add">Add images</button>
    <button id="reset">Reset demo</button>
  </p>
  <div id="image-container"></div>
</div>


<p><a href="https://codepen.io/desandro/pen/bIFyl">Edit this demo</a> or <a href="https://codepen.io/desandro/pen/hlzaw">vanilla JS demo</a> on CodePen.</p>

<p>Just to keep things interesting, there&rsquo;s a 10% chance of adding a broken image.</p>

<h2 id="install">Install</h2>
<h3 id="download">Download</h3>
<ul>
<li><a href="https://unpkg.com/imagesloaded@4/imagesloaded.pkgd.min.js">imagesloaded.pkgd.min.js</a> minified</li>
<li><a href="https://unpkg.com/imagesloaded@4/imagesloaded.pkgd.js">imagesloaded.pkgd.js</a> un-minified</li>
</ul>
<h3 id="cdn">CDN</h3>
<pre><code class="lang-html"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://unpkg.com/imagesloaded@4/imagesloaded.pkgd.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="comment">&lt;!-- or --&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://unpkg.com/imagesloaded@4/imagesloaded.pkgd.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</code></pre>
<h3 id="package-managers">Package managers</h3>
<p>Install via <a href="https://www.npmjs.com/package/imagesloaded">npm</a>: <code>npm install imagesloaded</code></p>
<p>Install via <a href="http://bower.io">Bower</a>: <code>bower install imagesloaded --save</code></p>
<h2 id="jquery">jQuery</h2>
<p>You can use imagesLoaded as a jQuery Plugin.</p>
<pre><code class="lang-js">$(<span class="string">'#container'</span>).imagesLoaded( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{
  <span class="comment">// images have loaded</span>
});

<span class="comment">// options</span>
$(<span class="string">'#container'</span>).imagesLoaded( {
  <span class="comment">// options...</span>
  },
  <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{
    <span class="comment">// images have loaded</span>
  }
);
</code></pre>
<p><code>.imagesLoaded()</code> returns a <a href="http://api.jquery.com/category/deferred-object/">jQuery Deferred object</a>. This allows you to use <code>.always()</code>, <code>.done()</code>, <code>.fail()</code> and <code>.progress()</code>.</p>
<pre><code class="lang-js">$(<span class="string">'#container'</span>).imagesLoaded()
  .always( <span class="function"><span class="keyword">function</span>(<span class="params"> instance </span>) </span>{
    <span class="built_in">console</span>.log(<span class="string">'all images loaded'</span>);
  })
  .done( <span class="function"><span class="keyword">function</span>(<span class="params"> instance </span>) </span>{
    <span class="built_in">console</span>.log(<span class="string">'all images successfully loaded'</span>);
  })
  .fail( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{
    <span class="built_in">console</span>.log(<span class="string">'all images loaded, at least one is broken'</span>);
  })
  .progress( <span class="function"><span class="keyword">function</span>(<span class="params"> instance, image </span>) </span>{
    <span class="keyword">var</span> result = image.isLoaded ? <span class="string">'loaded'</span> : <span class="string">'broken'</span>;
    <span class="built_in">console</span>.log( <span class="string">'image is '</span> + result + <span class="string">' for '</span> + image.img.src );
  });
</code></pre>
<h2 id="vanilla-javascript">Vanilla JavaScript</h2>
<p>You can use imagesLoaded with vanilla JS.</p>
<pre><code class="lang-js"><span class="imagesloaded_keyword">imagesLoaded</span>( elem, callback )
<span class="comment">// options</span>
<span class="imagesloaded_keyword">imagesLoaded</span>( elem, options, callback )
<span class="comment">// you can use `new` if you like</span>
<span class="keyword">new</span> <span class="imagesloaded_keyword">imagesLoaded</span>( elem, callback )
</code></pre>
<ul>
<li><code>elem</code> <em>Element, NodeList, Array, or Selector String</em></li>
<li><code>options</code> <em>Object</em></li>
<li><code>callback</code> <em>Function</em> - function triggered after all images have been loaded</li>
</ul>
<p>Using a callback function is the same as binding it to the <code>always</code> event (see below).</p>
<pre><code class="lang-js"><span class="comment">// element</span>
<span class="imagesloaded_keyword">imagesLoaded</span>( <span class="built_in">document</span>.querySelector(<span class="string">'#container'</span>), <span class="function"><span class="keyword">function</span>(<span class="params"> instance </span>) </span>{
  <span class="built_in">console</span>.log(<span class="string">'all images are loaded'</span>);
});
<span class="comment">// selector string</span>
<span class="imagesloaded_keyword">imagesLoaded</span>( <span class="string">'#container'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{...});
<span class="comment">// multiple elements</span>
<span class="keyword">var</span> posts = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.post'</span>);
<span class="imagesloaded_keyword">imagesLoaded</span>( posts, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{...});
</code></pre>
<p>Bind events with vanilla JS with .on(), .off(), and .once() methods.</p>
<pre><code class="lang-js"><span class="keyword">var</span> <span class="imgload_var">imgLoad</span> = <span class="imagesloaded_keyword">imagesLoaded</span>( elem );
<span class="function"><span class="keyword">function</span> <span class="title">onAlways</span>(<span class="params"> instance </span>) </span>{
  <span class="built_in">console</span>.log(<span class="string">'all images are loaded'</span>);
}
<span class="comment">// bind with .on()</span>
<span class="imgload_var">imgLoad</span>.on( <span class="string">'always'</span>, onAlways );
<span class="comment">// unbind with .off()</span>
<span class="imgload_var">imgLoad</span>.off( <span class="string">'always'</span>, onAlways );
</code></pre>
<h2 id="background">Background</h2>
<p>Detect when background images have loaded, in addition to <code>&lt;img&gt;</code>s.</p>
<p>Set <code>{ background: true }</code> to detect when the element&#39;s background image has loaded.</p>
<pre><code class="lang-js"><span class="comment">// jQuery</span>
$(<span class="string">'#container'</span>).imagesLoaded( { background: <span class="literal">true</span> }, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{
  <span class="built_in">console</span>.log(<span class="string">'#container background image loaded'</span>);
});

<span class="comment">// vanilla JS</span>
<span class="imagesloaded_keyword">imagesLoaded</span>( <span class="string">'#container'</span>, { background: <span class="literal">true</span> }, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{
  <span class="built_in">console</span>.log(<span class="string">'#container background image loaded'</span>);
});
</code></pre>
<p><a href="http://codepen.io/desandro/pen/pjVMPB">See jQuery demo</a> or <a href="http://codepen.io/desandro/pen/avKooW">vanilla JS demo</a> on CodePen.</p>
<p>Set to a selector string like <code>{ background: &#39;.item&#39; }</code> to detect when the background images of child elements have loaded.</p>
<pre><code class="lang-js"><span class="comment">// jQuery</span>
$(<span class="string">'#container'</span>).imagesLoaded( { background: <span class="string">'.item'</span> }, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{
  <span class="built_in">console</span>.log(<span class="string">'all .item background images loaded'</span>);
});

<span class="comment">// vanilla JS</span>
<span class="imagesloaded_keyword">imagesLoaded</span>( <span class="string">'#container'</span>, { background: <span class="string">'.item'</span> }, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{
  <span class="built_in">console</span>.log(<span class="string">'all .item background images loaded'</span>);
});
</code></pre>
<p><a href="http://codepen.io/desandro/pen/avKoZL">See jQuery demo</a> or <a href="http://codepen.io/desandro/pen/vNrBGz">vanilla JS demo</a> on CodePen.</p>
<h2 id="events">Events</h2>
<h3 id="always">always</h3>
<pre><code class="lang-js"><span class="comment">// jQuery</span>
$(<span class="string">'#container'</span>).imagesLoaded().always( <span class="function"><span class="keyword">function</span>(<span class="params"> instance </span>) </span>{
  <span class="built_in">console</span>.log(<span class="string">'ALWAYS - all images have been loaded'</span>);
});

<span class="comment">// vanilla JS</span>
<span class="imgload_var">imgLoad</span>.on( <span class="string">'always'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> instance </span>) </span>{
  <span class="built_in">console</span>.log(<span class="string">'ALWAYS - all images have been loaded'</span>);
});
</code></pre>
<p>Triggered after all images have been either loaded or confirmed broken.</p>
<ul>
<li><code>instance</code> <em>imagesLoaded</em> - the imagesLoaded instance</li>
</ul>
<h3 id="done">done</h3>
<pre><code class="lang-js"><span class="comment">// jQuery</span>
$(<span class="string">'#container'</span>).imagesLoaded().done( <span class="function"><span class="keyword">function</span>(<span class="params"> instance </span>) </span>{
  <span class="built_in">console</span>.log(<span class="string">'DONE  - all images have been successfully loaded'</span>);
});

<span class="comment">// vanilla JS</span>
<span class="imgload_var">imgLoad</span>.on( <span class="string">'done'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> instance </span>) </span>{
  <span class="built_in">console</span>.log(<span class="string">'DONE  - all images have been successfully loaded'</span>);
});
</code></pre>
<p>Triggered after all images have successfully loaded without any broken images.</p>
<h3 id="fail">fail</h3>
<pre><code class="lang-js">$(<span class="string">'#container'</span>).imagesLoaded().fail( <span class="function"><span class="keyword">function</span>(<span class="params"> instance </span>) </span>{
  <span class="built_in">console</span>.log(<span class="string">'FAIL - all images loaded, at least one is broken'</span>);
});

<span class="comment">// vanilla JS</span>
<span class="imgload_var">imgLoad</span>.on( <span class="string">'fail'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> instance </span>) </span>{
  <span class="built_in">console</span>.log(<span class="string">'FAIL - all images loaded, at least one is broken'</span>);
});
</code></pre>
<p>Triggered after all images have been loaded with at least one broken image.</p>
<h3 id="progress">progress</h3>
<pre><code class="lang-js"><span class="imgload_var">imgLoad</span>.on( <span class="string">'progress'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> instance, image </span>) </span>{
  <span class="keyword">var</span> result = image.isLoaded ? <span class="string">'loaded'</span> : <span class="string">'broken'</span>;
  <span class="built_in">console</span>.log( <span class="string">'image is '</span> + result + <span class="string">' for '</span> + image.img.src );
});
</code></pre>
<p>Triggered after each image has been loaded.</p>
<ul>
<li><code>instance</code> <em>imagesLoaded</em> - the imagesLoaded instance</li>
<li><code>image</code> <em>LoadingImage</em> - the LoadingImage instance of the loaded image</li>
</ul>
<h2 id="sponsored-by-metafizzy">Sponsored by Metafizzy</h2>

<p class="tagline">Development on imagesLoaded is sponsored by <a href="https://metafizzy.co">Metafizzy</a>. Metafizzy makes delightful UI libraries that use imagesLoaded:</p>

<div class="other-products">
  <div class="other-product">
    <a class="other-product__link" href="https://isotope.metafizzy.co/">
      <img class="other-product__image" src="https://i.imgur.com/xfGupRf.png" alt="Isotope">
      <h3 class="other-product__title">Isotope</h3>
      <p class="other-product__description">Filter &amp; sort magical&nbsp;layouts</p>
    </a>
  </div>

  <div class="other-product">
    <a class="other-product__link" href="https://flickity.metafizzy.co/">
      <img class="other-product__image" src="https://i.imgur.com/8BFo4Aj.png" alt="Flickity">
      <h3 class="other-product__title">Flickity</h3>
      <p class="other-product__description">Touch, responsive, flickable&nbsp;galleries</p>
    </a>
  </div>

  <div class="duo__cell other-product">
    <a class="other-product__link" href="https://packery.metafizzy.co/">
      <img class="other-product__image" src="https://i.imgur.com/uRXPQfm.png" alt="Packery">
      <h3 class="other-product__title">Packery</h3>
      <p class="other-product__description">Gap-less, draggable, bin-packing layout library</p>
    </a>
  </div>
</div>

<h2 id="properties">Properties</h2>
<h3 id="loadingimage-img">LoadingImage.img</h3>
<p><em>Image</em> - The <code>img</code> element</p>
<h3 id="loadingimage-isloaded">LoadingImage.isLoaded</h3>
<p><em>Boolean</em> - <code>true</code> when the image has successfully loaded</p>
<h3 id="imagesloaded-images">imagesLoaded.images</h3>
<p>Array of <em>LoadingImage</em> instances for each image detected</p>
<pre><code class="lang-js"><span class="keyword">var</span> <span class="imgload_var">imgLoad</span> = <span class="imagesloaded_keyword">imagesLoaded</span>(<span class="string">'#container'</span>);
<span class="imgload_var">imgLoad</span>.on( <span class="string">'always'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{
  <span class="built_in">console</span>.log( <span class="imgload_var">imgLoad</span>.images.length + <span class="string">' images loaded'</span> );
  <span class="comment">// detect which image is broken</span>
  <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>, len = <span class="imgload_var">imgLoad</span>.images.length; i &lt; len; i++ ) {
    <span class="keyword">var</span> image = <span class="imgload_var">imgLoad</span>.images[i];
    <span class="keyword">var</span> result = image.isLoaded ? <span class="string">'loaded'</span> : <span class="string">'broken'</span>;
    <span class="built_in">console</span>.log( <span class="string">'image is '</span> + result + <span class="string">' for '</span> + image.img.src );
  }
});
</code></pre>
<h2 id="browserify">Browserify</h2>
<p>imagesLoaded works with <a href="http://browserify.org/">Browserify</a>.</p>
<pre><code class="lang-bash">npm install imagesloaded --save
</code></pre>
<pre><code class="lang-js"><span class="keyword">var</span> <span class="imagesloaded_keyword">imagesLoaded</span> = <span class="built_in">require</span>(<span class="string">'imagesloaded'</span>);

<span class="imagesloaded_keyword">imagesLoaded</span>( elem, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{...} );
</code></pre>
<p>Use <code>.makeJQueryPlugin</code> to make to use <code>.imagesLoaded()</code> jQuery plugin.</p>
<pre><code class="lang-js"><span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>);
<span class="keyword">var</span> <span class="imagesloaded_keyword">imagesLoaded</span> = <span class="built_in">require</span>(<span class="string">'imagesloaded'</span>);

<span class="comment">// provide jQuery argument</span>
<span class="imagesloaded_keyword">imagesLoaded</span>.makeJQueryPlugin( $ );
<span class="comment">// now use .imagesLoaded() jQuery plugin</span>
$(<span class="string">'#container'</span>).imagesLoaded( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{...});
</code></pre>
<h2 id="webpack">Webpack</h2>
<p>Install imagesLoaded with npm.</p>
<pre><code class="lang-bash">npm install imagesloaded
</code></pre>
<p>You can then <code>require(&#39;imagesloaded&#39;)</code>.</p>
<pre><code class="lang-js"><span class="comment">// main.js</span>
<span class="keyword">var</span> <span class="imagesloaded_keyword">imagesLoaded</span> = <span class="built_in">require</span>(<span class="string">'imagesloaded'</span>);

<span class="imagesloaded_keyword">imagesLoaded</span>( <span class="string">'#container'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{
  <span class="comment">// images have loaded</span>
});
</code></pre>
<p>Use <code>.makeJQueryPlugin</code> to make <code>.imagesLoaded()</code> jQuery plugin.</p>
<pre><code class="lang-js"><span class="comment">// main.js</span>
<span class="keyword">var</span> <span class="imagesloaded_keyword">imagesLoaded</span> = <span class="built_in">require</span>(<span class="string">'imagesloaded'</span>);
<span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>);

<span class="comment">// provide jQuery argument</span>
<span class="imagesloaded_keyword">imagesLoaded</span>.makeJQueryPlugin( $ );
<span class="comment">// now use .imagesLoaded() jQuery plugin</span>
$(<span class="string">'#container'</span>).imagesLoaded( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{...});
</code></pre>
<p>Run webpack.</p>
<pre><code class="lang-bash">webpack main.js bundle.js
</code></pre>
<h2 id="requirejs">RequireJS</h2>
<p>imagesLoaded works with <a href="http://requirejs.org">RequireJS</a>.</p>
<p>You can require <a href="http://imagesloaded.desandro.com/imagesloaded.pkgd.js">imagesloaded.pkgd.js</a>.</p>
<pre><code class="lang-js">requirejs( [
  <span class="string">'path/to/imagesloaded.pkgd.js'</span>,
], <span class="function"><span class="keyword">function</span>(<span class="params"> imagesLoaded </span>) </span>{
  <span class="imagesloaded_keyword">imagesLoaded</span>( <span class="string">'#container'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{ ... });
});
</code></pre>
<p>Use <code>.makeJQueryPlugin</code> to make <code>.imagesLoaded()</code> jQuery plugin.</p>
<pre><code class="lang-js">requirejs( [
  <span class="string">'jquery'</span>,
  <span class="string">'path/to/imagesloaded.pkgd.js'</span>,
], <span class="function"><span class="keyword">function</span>(<span class="params"> $, imagesLoaded </span>) </span>{
  <span class="comment">// provide jQuery argument</span>
  <span class="imagesloaded_keyword">imagesLoaded</span>.makeJQueryPlugin( $ );
  <span class="comment">// now use .imagesLoaded() jQuery plugin</span>
  $(<span class="string">'#container'</span>).imagesLoaded( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{...});
});
</code></pre>
<p>You can manage dependencies with <a href="http://bower.io">Bower</a>. Set <code>baseUrl</code> to <code>bower_components</code> and set a path config for all your application code.</p>
<pre><code class="lang-js">requirejs.config({
  baseUrl: <span class="string">'bower_components/'</span>,
  paths: { <span class="comment">// path to your app</span>
    app: <span class="string">'../'</span>
  }
});

requirejs( [
  <span class="string">'imagesloaded/imagesloaded'</span>,
  <span class="string">'app/my-component.js'</span>
], <span class="function"><span class="keyword">function</span>(<span class="params"> imagesLoaded, myComp </span>) </span>{
  <span class="imagesloaded_keyword">imagesLoaded</span>( <span class="string">'#container'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{ ... });
});
</code></pre>
<h2 id="browser-support">Browser support</h2>
<ul>
<li>IE9+</li>
<li>Android 2.3+</li>
<li>iOS Safari 4+</li>
<li>All other modern browsers</li>
</ul>
<p>Use <a href="http://imagesloaded.desandro.com/v3/">imagesLoaded v3</a> for IE8 support.</p>
<h2 id="mit-license">MIT License</h2>
<p>imagesLoaded is released under the <a href="http://desandro.mit-license.org/">MIT License</a>. Have at it.</p>

  </div>

<script src="imagesloaded.pkgd.js"></script>
<script src="scripts.js"></script>

</body>
</html>
